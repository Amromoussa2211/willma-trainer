name: Android E2E Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: $ANDROID_HOME
          key: android-sdk-${{ runner.os }}-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Clear SDK Cache
        run: |
          rm -rf $ANDROID_HOME/licenses $ANDROID_HOME/tools $ANDROID_HOME/cmdline-tools

      - name: Download Android Command Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm cmdline-tools.zip

      - name: Accept Android SDK Licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install Android SDK Packages
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "emulator" \
            "system-images;android-34;google_apis;x86_64"

      - name: Add adb to PATH
        run: |
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Create AVD
        run: |
          # Install the required system image
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-34;google_apis;x86_64"

          # Create the AVD
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --name testAVD \
            --package 'system-images;android-34;google_apis;x86_64' \
            --device 'pixel' \
            --force

      - name: Configure Emulator Settings
        run: |
          echo "hw.cpu.ncore=2" >> ~/.android/avd/testAVD.avd/config.ini
          echo "hw.ramSize=2048" >> ~/.android/avd/testAVD.avd/config.ini
          echo "hw.gpu.enabled=yes" >> ~/.android/avd/testAVD.avd/config.ini
          echo "hw.gpu.mode=swiftshader_indirect" >> ~/.android/avd/testAVD.avd/config.ini

      - name: Fix KVM permissions
        run: |
          sudo apt-get update -y
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo gpasswd -a $USER kvm
          sudo chmod 666 /dev/kvm

      - name: Verify KVM
        run: |
          if [ ! -e /dev/kvm ]; then
            echo "KVM is not available."
            exit 1
          else
            echo "KVM is available."
          fi

      - name: Start Emulator
        run: |
          # Verify the AVD exists
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd

          # Start the emulator
          nohup $ANDROID_HOME/emulator/emulator -avd testAVD \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -memory 2048 \
            -cores 2 \
            -no-boot-anim \
            -no-snapshot-save \
            -feature -VideoPlusCodecs \
            -feature -NativeBridge \
            -writable-system \
            -qemu -enable-kvm &
          sleep 120  # Wait for 2 minutes

      - name: Wait for Emulator Boot
        run: |
          adb wait-for-device
          while [[ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ]]; do
            sleep 5
            echo "Waiting for emulator to boot..."
          done
          echo "Emulator is fully booted."

      - name: Configure System Properties
        run: |
          adb root
          adb wait-for-device
          adb shell "setprop debug.android.hardware.camera.external 1"
          adb shell "setprop ro.test.disable_native_bridge 1"

      - name: Disable Bluetooth in Emulator
        run: |
          adb shell settings put global bluetooth_on 0
          echo "Bluetooth disabled in the emulator."

      - name: List ADB Devices
        run: adb devices

      - name: Install Dependencies
        run: npm install

      - name: Download APK from Google Drive
        run: |
          pip install gdown
          gdown --fuzzy "https://drive.google.com/file/d/1vpmsQks5b_Q5rUGvsLUahrHwkOlu3Mtz/view?usp=drive_link" -O app-release.apk
        # Set environment variable for later steps
        env:
          apk_CI_PATH: app-release.apk

      - name: Download APKs from Google Drive
        run: |
          pip install gdown
          
          echo "Downloading first APK..."
          gdown --fuzzy "https://drive.google.com/file/d/1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F/view?usp=drive_link" -O app-release.apk
          
          echo "Downloading second APK..."
          gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O client-app-release.apk
        env:
          apk_CI_PATH: app-release.apk
          apk_CLIENT_PATH: client-app-release.apk

      - name: Validate and install APKs
        timeout-minutes: 10
        env:
          apk_CI_PATH: app-release.apk
          apk_CLIENT_PATH: client-app-release.apk
        run: |
          function adb_retry() {
            local cmd="$@"
            local max=5
            local delay=5

            for ((i=1; i<=max; i++)); do
              if eval "$cmd"; then
                return 0
              fi
              echo "Attempt $i failed. Retrying in $delay seconds..."
              sleep $delay
            done
            echo "::error::Command failed after $max attempts: $cmd"
            exit 1
          }

          # Verify both APK files exist
          if [ ! -f "${apk_CI_PATH}" ]; then
            echo "::error::Missing first APK at ${apk_CI_PATH}"
            exit 1
          fi

          if [ ! -f "${apk_CLIENT_PATH}" ]; then
            echo "::error::Missing second APK at ${apk_CLIENT_PATH}"
            exit 1
          fi

          # Install first APK
          echo "Installing first APK..."
          adb_retry "adb install -r -t -g ${apk_CI_PATH}"
          adb_retry "adb shell pm list packages | grep -q com.willma.staging"

          # Install second APK
          echo "Installing second APK..."
          adb_retry "adb install -r -t -g ${apk_CLIENT_PATH}"
          adb_retry "adb shell pm list packages | grep -q com.willma.client.staging"

      - name: Run Appium server
        run: |
          nohup npx appium --relaxed-security --log-timestamp > logs/appium.log 2>&1 &
          sleep 10
          echo "Appium PID: $(pgrep -f 'appium')"

      - name: Execute E2E tests
        timeout-minutes: 25
        run: |
          set -x
          npx wdio run ./wdio.ci.conf.js --specRetries 2

      - name: Gather diagnostics
        if: always()
        run: |
          mkdir -p diagnostics
          adb logcat -d > diagnostics/logcat.log
          adb bugreport diagnostics/bugreport.zip
          cp -r screenshots diagnostics/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            allure-results/
            diagnostics/
            logs/appium.log
          retention-days: 3

      - name: Terminate emulator
        if: always()
        run: |
          adb emu kill || true
          pkill -f 'qemu-system' || true