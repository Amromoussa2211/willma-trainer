name: 🚀 Android E2E Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AVD_NAME: testAVD
      ANDROID_AVD_HOME: $HOME/.android/avd
      ANDROID_HOME: $HOME/android-sdk

    steps:
      - name: ↓ Checkout Code
        uses: actions/checkout@v3

      - name: ⚛️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: ☕️ Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 🔄 Install Android Command Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm cmdline-tools.zip

      - name: 🚀 Accept Android SDK Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: 🚀 Install Android SDK Packages
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;34.0.0" \
            "emulator" \
            "system-images;android-33;google_apis;x86_64"

          # Verify system image installation
          if [ ! -d "$ANDROID_HOME/system-images/android-33/google_apis/x86_64" ]; then
            echo "::error::System image installation failed!"
            exit 1
          fi

      - name: ➕ Add Android tools to PATH
        run: |
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH

      - name: 🛠️ Create AVD
        run: |
          # List available devices for debugging
          avdmanager list device

          # Create AVD with explicit device ID
          echo "no" | avdmanager create avd \
            --name "$AVD_NAME" \
            --package "system-images;android-33;google_apis;x86_64" \
            --device "pixel_4" \
            --force

          # Verify AVD directory creation
          if [ ! -d "$ANDROID_AVD_HOME/$AVD_NAME.avd" ]; then
            echo "::error::AVD directory creation failed!"
            echo "Contents of $ANDROID_AVD_HOME:"
            ls -la $ANDROID_AVD_HOME
            exit 1
          fi

      - name: ⚖️ Configure Emulator Settings
        run: |
          CONFIG_FILE="$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "hw.ramSize=2048" >> $CONFIG_FILE
          echo "hw.gpu.enabled=yes" >> $CONFIG_FILE
          echo "hw.gpu.mode=swiftshader_indirect" >> $CONFIG_FILE
          echo "disk.dataPartition.size=2G" >> $CONFIG_FILE
          echo "hw.cpu.ncore=2" >> $CONFIG_FILE
          echo "vm.heapSize=256" >> $CONFIG_FILE

          # Display final configuration
          echo "Final AVD configuration:"
          cat $CONFIG_FILE

      - name: ⚠️ Configure KVM
        run: |
          sudo apt-get update -y
          sudo apt-get install -y qemu-kvm
          sudo chown $USER /dev/kvm
          sudo chmod 666 /dev/kvm

      - name: 🌟 Start Emulator
        timeout-minutes: 10
        run: |
          emulator -avd $AVD_NAME \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -wipe-data \
            -memory 2048 \
            -logcat '*:V' > emulator.log 2>&1 &
          
          # Wait for emulator to start
          sleep 180

      - name: ⌛ Wait for Emulator Boot
        timeout-minutes: 5
        run: |
          adb wait-for-device
          echo "Emulator serial number: $(adb get-serialno)"
          
          # Wait for full boot
          until adb shell getprop sys.boot_completed | grep -q 1; do
            echo "Waiting for boot completion..."
            sleep 10
          done
          
          # Disable animations
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          
          # Wake device
          adb shell input keyevent 82

      - name: 🔍 Verify Emulator Status
        run: |
          adb devices
          adb shell screencap -p /sdcard/screen.png
          adb pull /sdcard/screen.png
          ls -la

      - name: 💾 Install Node Dependencies
        run: npm install

      - name: 🔽 Download APKs
        run: |
          pip install gdown
          gdown --fuzzy "https://drive.google.com/file/d/1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F/view?usp=drive_link" -O app-release-trainer.apk
          gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O appclient.apk

      - name: 🌐 Install APKs
        timeout-minutes: 3
        run: |
          adb install -t -r -g app-release-trainer.apk
          adb install -t -r -g appclient.apk
          adb shell pm list packages | grep willma

      - name: 🚀 Run Appium Server
        run: |
          npx appium --relaxed-security &> appium.log &
          sleep 10
          echo "Appium server PID: $(pgrep appium)"

      - name: 🔧 Run E2E Tests
        timeout-minutes: 15
        run: npx wdio run ./wdio.ci.conf.js --specRetries 2

      - name: 📤 Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ github.run_id }}
          path: |
            *.log
            *.png
            screenshots/
            diagnostics/

      - name: 🚪 Cleanup
        if: always()
        run: |
          adb emu kill || true
          pkill -f appium || true
          pkill -f emulator || true
