name: E2E Android Test

on:
  push:
    branches: [main]

jobs:
  android-e2e-tests:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3

      - name: 🧰 Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: 🧰 Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: 🧱 Install Android components
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "emulator" "platforms;android-29"

          # Try to install fast x86 image (requires KVM)
          sdkmanager --install "system-images;android-29;google_apis;x86" || echo "Failed to install x86 image"

          # Fallback: Install ARM image if no KVM (slower but no virtualization required)
          sdkmanager --install "system-images;android-29;google_apis;armeabi-v7a" || echo "Failed to install ARM image"

          # List installed and available system images for android-29
          sdkmanager --list | grep android-29

      # Optional: Check KVM access (commented because likely requires sudo and may fail on GitHub runner)
      - name: 🖥️ Check KVM access (informational)
        run: |
          if command -v sudo &> /dev/null && command -v kvm-ok &> /dev/null; then
            sudo kvm-ok || echo "KVM not accessible - add user to kvm group and reboot"
          else
            echo "kvm-ok command not found or sudo not available"
          fi

      - name: 📱 Create Android Emulator
        run: |
          echo "no" | avdmanager create avd --force --name test --package "system-images;android-29;google_apis;armeabi-v7a" --device "pixel"

      - name: 🚀 Validate Android SDK
        run: |
          sdkmanager --list
          emulator -list-avds

      - name: 🚀 Start Emulator & Wait for Boot
        run: |
          nohup $ANDROID_SDK_ROOT/emulator/emulator -avd test -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none &

          echo "Waiting for emulator to start..."
          adb wait-for-device

          timeout=300
          elapsed=0
          boot_completed=""

          until [[ "$boot_completed" == "1" ]] || [[ $elapsed -ge $timeout ]]; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>&1 | tr -d '\r')
            echo "Boot completed status: $boot_completed"
            sleep 5
            elapsed=$((elapsed + 5))
          done

          if [[ $elapsed -ge $timeout ]]; then
            echo "❌ Emulator boot timed out after $timeout seconds"
            exit 1
          fi

          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          echo "✅ Emulator ready"

      - name: 🐍 Download APKs via Python
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip gdown
          gdown --fuzzy "https://drive.google.com/file/d/1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F/view?usp=drive_link" -O app-release-trainer.apk
          gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O appclient.apk

      - name: 📦 Uninstall Old + Install New APKs
        run: |
          adb uninstall com.willma.staging || echo "Trainer app not installed"
          adb uninstall com.willma.client.staging || echo "Client app not installed"
          adb install -r -g app-release-trainer.apk
          adb install -r -g appclient.apk

      - name: 🧪 Install Node & Dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📦 Install npm dependencies
        run: npm ci

      - name: 🚀 Start Appium Server
        run: |
          mkdir -p logs
          nohup npx appium --relaxed-security --log-timestamp > logs/appium.log 2>&1 &
          sleep 10

      - name: 🧪 Run E2E Tests
        run: |
          echo "🧪 Running WebdriverIO tests"
          npx wdio run ./wdio.ci.conf.js || echo "Tests failed"

      - name: 📸 Upload Screenshots (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ./errorShots/

      - name: 📄 Upload Appium Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium-logs
          path: logs/appium.log

      - name: 🧹 Shutdown Emulator
        if: always()
        run: adb -s emulator-5554 emu kill || true
