name: Android E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  ANDROID_SDK_VERSION: '33'
  ANDROID_BUILD_TOOLS_VERSION: '33.0.0'
  ANDROID_EMU_VERSION: '31'
  EMULATOR_TIMEOUT: 300
  AVD_CACHE_VERSION: '1'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Set maximum job duration

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Clear SDK Cache
        run: |
          rm -rf $ANDROID_HOME/licenses $ANDROID_HOME/tools $ANDROID_HOME/cmdline-tools

      - name: Download Android Command Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm cmdline-tools.zip

      - name: Accept Android SDK Licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install Android SDK Packages
        run: |
          CMDLINE_TOOLS="$ANDROID_HOME/cmdline-tools/latest/bin"
          echo "Using SDK Manager from: $CMDLINE_TOOLS"
          "$CMDLINE_TOOLS/sdkmanager" --install \
            "platform-tools" \
            "platforms;android-${{ env.ANDROID_SDK_VERSION }}" \
            "build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}" \
            "emulator" \
            "system-images;android-${{ env.ANDROID_EMU_VERSION }};google_apis;x86_64"

      - name: Add adb to PATH
        run: |
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ANDROID_EMU_VERSION }}-${{ env.AVD_CACHE_VERSION }}

      - name: Create and Start Emulator
        run: |
          echo "no" | "$ANDROID_HOME/cmdline-tools/latest/bin/avdmanager" create avd \
            --name testEmulator \
            --package "system-images;android-${{ env.ANDROID_EMU_VERSION }};google_apis;x86_64" \
            --device 'pixel_5' \
            --force

          echo "hw.cpu.ncore=2" >> ~/.android/avd/testEmulator.avd/config.ini
          echo "hw.ramSize=2048" >> ~/.android/avd/testEmulator.avd/config.ini
          echo "disk.dataPartition.size=2048M" >> ~/.android/avd/testEmulator.avd/config.ini

          $ANDROID_HOME/emulator/emulator -avd testEmulator \
            -no-audio \
            -no-boot-anim \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -noaudio \
            -no-window \
            -camera-back none \
            -camera-front none \
            -memory 2048 \
            -cores 2 \
            -accel on \
            -qemu -enable-kvm &

      - name: Fix KVM permissions
        run: |
          sudo apt-get update -y
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo gpasswd -a $USER kvm
          sudo chmod 666 /dev/kvm

      - name: Wait for Emulator Boot
        timeout-minutes: 5
        run: |
          TIMEOUT=${{ env.EMULATOR_TIMEOUT }}
          START_TIME=$(date +%s)
          while [ $(($(date +%s) - START_TIME)) -lt $TIMEOUT ]; do
            if adb shell getprop sys.boot_completed 2>&1 | grep -q '1'; then
              echo "Emulator booted successfully."
              adb shell settings put global window_animation_scale 0
              adb shell settings put global transition_animation_scale 0
              adb shell settings put global animator_duration_scale 0
              exit 0
            fi
            sleep 1
          done
          echo "Timeout waiting for emulator to boot."
          exit 1

      - name: Restart Network Service
        run: |
          adb shell svc wifi disable
          adb shell svc wifi enable
          adb shell svc data disable
          adb shell svc data enable
          sleep 60

      - name: Set DNS Servers (Optional)
        run: |
          adb shell setprop net.dns1 8.8.8.8
          adb shell setprop net.dns2 8.8.4.4
          echo "DNS servers set to Google Public DNS."

      - name: Check Network Interfaces
        run: |
          adb shell netcfg
          echo "Network interface configuration (netcfg output):"

      - name: Check Routing Table
        run: |
          adb shell ip route
          echo "Routing table (ip route output):"

      - name: Check DNS Configuration
        run: |
          adb shell cat /etc/resolv.conf
          echo "/etc/resolv.conf content:"

      - name: Wait for Internet Connection
        run: |
          TIMEOUT=120
          START_TIME=$(date +%s)
          CONNECTED=false
          while [ "$(date +%s)" -lt $((START_TIME + TIMEOUT)) ]; do
            adb shell ping -c 1 8.8.8.8 > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "Internet connection is working."
              CONNECTED=true
              break
            fi
            echo "Waiting for internet connection..."
            sleep 5
          done
          if [ "$CONNECTED" = "false" ]; then
            echo "Internet connection check timed out."
            exit 1
          fi

      - name: List ADB Devices
        run: adb devices

      - name: Download Image from GitHub to Emulator
        run: |
          IMAGE_URL="https://raw.githubusercontent.com/webdriverio/awesome-webdriverio/main/.github/workflows/assets/awesome_webdriverio_branding.png"
          wget "$IMAGE_URL" -O webdriverio_logo.png
          echo "WebdriverIO logo downloaded: webdriverio_logo.png"
          adb shell mkdir -p /sdcard/Pictures
          adb push webdriverio_logo.png /sdcard/Pictures/webdriverio_logo.png
          echo "WebdriverIO logo pushed to emulator gallery."

      - name: Take Screenshot After Emulator Start
        run: |
          adb exec-out screencap -p > emulator_boot.png
          echo "Screenshot taken: emulator_boot.png"

      - name: Install Dependencies
        run: npm install

      - name: Download and Install APK from Google Drive
        run: |
          wget --no-check-certificate 'https://drive.google.com/uc?export=download&id=1vpmsQks5b_Q5rUGvsLUahrHwkOlu3Mtz' -O app.apk
          echo "APK downloaded from Google Drive."
          adb install app.apk
          echo "APK installed successfully."
          echo "APK_PATH=$(pwd)/app.apk" >> $GITHUB_ENV

      - name: Verify APK Installation
        run: |
          adb shell pm list packages | grep com.willma.client.staging
          if [ $? -eq 0 ]; then
            echo "APK package found."
          else
            echo "APK package not found. Installation failed?"
            exit 1

      - name: Start Appium
        run: |
          npm run start:appium > appium.log 2>&1 &
          sleep 30

      - name: Verify Appium is Running
        run: |
          if grep -q "Appium REST http interface listener started on" appium.log; then
            echo "Appium is running and ready."
          else
            echo "Appium is not running or not ready."
            cat appium.log
            exit 1
          fi

      - name: Capture Device Logs
        run: |
          adb logcat -c
          adb logcat > device.log 2>&1 &
          echo $! > logcat_pid.txt
          echo "Device logs are being captured in device.log"

      - name: Run Tests with Retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: npm run test:ci
          on_retry_command: |
            adb emu kill
            sleep 5
            $ANDROID_HOME/emulator/emulator -avd testEmulator -no-window &
            sleep 30
            adb wait-for-device

      - name: Stop Device Logs Capture
        run: |
          if [ -f logcat_pid.txt ]; then
            LOGCAT_PID=$(cat logcat_pid.txt)
            kill -TERM $LOGCAT_PID
            echo "Stopped logcat process with PID $LOGCAT_PID"
          else
            echo "No logcat process found to stop."
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            allure-results/
            screenshots/
            logs/
            appium.log
            device.log
          retention-days: 14

      - name: Generate Allure Report
        if: always()
        run: |
          npm run generate-report
          
      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 14

  notify-manager:
    needs: e2e-tests
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v5
        with:
          server_address: smtp.office365.com
          server_port: 587
          secure: false
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Android Tests Update - ${{ github.event.head_commit.message }}"
          to: fady@wilma.life, amr.ibrahim@willma.life
          from: "Willma CI/CD <${{ secrets.SMTP_USER }}>"
          html_body: |
            <div style="font-family: Arial, sans-serif; padding: 20px;">
              <h2 style="color: #1a73e8;">New Android Test Deployment</h2>
              <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
                <p><strong>📦 Repository:</strong> ${{ github.repository }}</p>
                <p><strong>🔑 Commit ID:</strong> <code>${{ github.sha }}</code></p>
                <p><strong>👤 Author:</strong> ${{ github.actor }}</p>
                <p><strong>📝 Message:</strong> ${{ github.event.head_commit.message }}</p>
                <p><strong>📅 Date:</strong> ${{ github.event.head_commit.timestamp }}</p>
              </div>
              <p style="margin-top: 20px;">
                <a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
                   style="background-color: #1a73e8; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px;">
                  View Full Commit Details
                </a>
              </p>
              <p style="margin-top: 20px; color: #666;">
                Workflow Status: ${{ job.status }}<br>
                This is an automated notification from Willma CI/CD System
              </p>
            </div>