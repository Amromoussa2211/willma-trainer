name: Android E2E Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AVD_NAME: testAVD
      ANDROID_AVD_HOME: $HOME/.android/avd
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Clear SDK Cache
        run: |
          rm -rf $ANDROID_HOME/licenses $ANDROID_HOME/tools $ANDROID_HOME/cmdline-tools

      - name: Download Android Command Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm cmdline-tools.zip

      - name: Accept Android SDK Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install Android SDK Packages
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "emulator" \
            "system-images;android-34;google_apis;x86_64"

      - name: Add adb to PATH
        run: echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Create AVD
        run: |
          mkdir -p ~/.android/avd
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --name "$AVD_NAME" \
            --package "system-images;android-34;google_apis;x86_64" \
            --device "pixel" \
            --force
          ls ~/.android/avd

      - name: Configure Emulator Settings
        run: |
          echo "hw.cpu.ncore=2" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini
          echo "hw.ramSize=2048" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini
          echo "hw.gpu.enabled=yes" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini
          echo "hw.gpu.mode=swiftshader_indirect" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini

      - name: Fix KVM permissions
        run: |
          sudo apt-get update -y
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo gpasswd -a $USER kvm
          sudo chmod 666 /dev/kvm

      - name: Verify KVM
        run: |
          if [ ! -e /dev/kvm ]; then
            echo "KVM is not available."
            exit 1
          else
            echo "KVM is available."
          fi

      - name: Start Emulator
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd "$AVD_NAME" \
            -no-audio -no-window -gpu swiftshader_indirect -memory 2048 -cores 2 \
            -no-boot-anim -no-snapshot-save -qemu -enable-kvm &
          sleep 120

      - name: Wait for Emulator Boot
        run: |
          adb wait-for-device
          while [[ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ]]; do
            echo "Waiting for emulator to boot..."
            sleep 5
          done
          echo "Emulator booted."

      - name: Disable Bluetooth in Emulator
        run: |
          adb shell settings put global bluetooth_on 0
          echo "Bluetooth disabled in the emulator."

      - name: List ADB Devices
        run: adb devices

      - name: Install Dependencies
        run: npm install

      - name: Download APKs
        run: |
          pip install gdown
          gdown --fuzzy "https://drive.google.com/file/d/1vpmsQks5b_Q5rUGvsLUahrHwkOlu3Mtz/view?usp=drive_link" -O app-release.apk
          gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O client-app-release.apk
        env:
          apk_CI_PATH: app-release.apk
          apk_CLIENT_PATH: client-app-release.apk

      - name: Validate and Install APKs
        timeout-minutes: 10
        run: |
          function adb_retry() {
            local cmd="$@"
            for i in {1..5}; do
              if eval "$cmd"; then return 0; fi
              echo "Attempt $i failed. Retrying..."
              sleep 5
            done
            echo "::error::Command failed after retries: $cmd"
            exit 1
          }

          if [ ! -f "app-release.apk" ]; then
            echo "::error::Missing app-release.apk"
            exit 1
          fi

          if [ ! -f "client-app-release.apk" ]; then
            echo "::error::Missing client-app-release.apk"
            exit 1
          fi

          adb_retry "adb install -r -t -g app-release.apk"
          adb_retry "adb install -r -t -g client-app-release.apk"

      - name: Run Appium server
        run: |
          mkdir -p logs
          nohup npx appium --relaxed-security --log-timestamp > logs/appium.log 2>&1 &
          sleep 10
          netstat -tuln | grep 4723 || echo "Appium port not found"

      - name: Run E2E Tests
        timeout-minutes: 25
        run: |
          set -x
          npx wdio run ./wdio.ci.conf.js --specRetries 2

      - name: Gather Diagnostics
        if: always()
        run: |
          mkdir -p diagnostics
          adb logcat -d > diagnostics/logcat.log
          adb bugreport diagnostics/bugreport.zip || true
          cp -r screenshots diagnostics/ || true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            allure-results/
            diagnostics/
            logs/appium.log
          retention-days: 3

      - name: Kill Emulator
        if: always()
        run: |
          adb emu kill || true
          pkill -f 'qemu-system' || true
