name: 🚀 Android E2E Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AVD_NAME: willma_avd
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_AVD_HOME: ${{ github.workspace }}/.android/avd

    steps:
      - name: 🧹 Clean Workspace
        run: |
          rm -rf $ANDROID_HOME
          rm -rf $ANDROID_AVD_HOME

      - name: ↓ Checkout Code
        uses: actions/checkout@v3

      - name: ⚛️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: ☕️ Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 🔄 Install Android CLI Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cli-tools.zip
          unzip cli-tools.zip -d "$ANDROID_HOME/cmdline-tools/latest"
          rm cli-tools.zip

      - name: 🚀 Accept Licenses
        run: |
          mkdir -p $ANDROID_HOME/licenses
          echo -e "\n24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_HOME/licenses/android-sdk-license
          echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license

      - name: 🛠️ Install SDK Components
        run: |
          $ANDROID_HOME/cmdline-tools/latest/cmdline-tools/bin/sdkmanager \
            --sdk_root=$ANDROID_HOME \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "emulator" \
            "system-images;android-34;google_apis;x86_64"

          # Verify system image installation
          if [ ! -d "$ANDROID_HOME/system-images/android-34/google_apis/x86_64" ]; then
            echo "::error::System image not installed!"
            exit 1
          fi

      - name: ➕ Add Android Tools to PATH
        run: |
          echo "$ANDROID_HOME/cmdline-tools/latest/cmdline-tools/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH

      - name: 🛠️ Create AVD
        run: |
          mkdir -p $ANDROID_AVD_HOME
          avdmanager create avd \
            --name $AVD_NAME \
            --package "system-images;android-34;google_apis;x86_64" \
            --device "pixel_4" \
            --force

          # Verify AVD configuration
          if [ ! -f "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini" ]; then
            echo "::error::AVD configuration missing!"
            ls -la $ANDROID_AVD_HOME
            exit 1
          fi

      - name: ⚙️ Configure Emulator
        run: |
          echo "hw.ramSize=4096" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "hw.gpu.enabled=yes" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "hw.gpu.mode=swiftshader_indirect" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "disk.dataPartition.size=4G" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"

      - name: 🔧 Setup KVM
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm
          sudo chmod 666 /dev/kvm

      - name: 🔽 Download APKs
        run: |
          pip install gdown
          gdown "https://drive.google.com/uc?id=1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F" -O app-release-trainer.apk
          gdown "https://drive.google.com/uc?id=1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY" -O appclient.apk
          
          # Verify APKs
          if [ $(stat -c%s "app-release-trainer.apk") -lt 10000000 ]; then
            echo "::error::Trainer APK too small!"
            exit 1
          fi
          if [ $(stat -c%s "appclient.apk") -lt 10000000 ]; then
            echo "::error::Client APK too small!"
            exit 1
          fi

      - name: 🚀 Start Emulator
        timeout-minutes: 10
        run: |
          emulator -avd $AVD_NAME \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -memory 4096 \
            -logcat '*:V' > emulator.log 2>&1 &
          sleep 300

      - name: ⏳ Wait for Boot
        timeout-minutes: 5
        run: |
          adb wait-for-device
          until adb shell getprop sys.boot_completed | grep -q 1; do
            echo "Boot status: $(adb shell getprop sys.boot_completed)"
            sleep 10
          done
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0

      - name: 📦 Install APKs
        run: |
          adb install -t -r -g app-release-trainer.apk
          adb install -t -r -g appclient.apk
          
          # Verify installation
          adb shell pm list packages | grep willma

      - name: 🚀 Start Appium
        run: |
          npx appium --relaxed-security &> appium.log &
          sleep 15

      - name: 🧪 Run E2E Tests
        timeout-minutes: 20
        run: npx wdio run ./wdio.ci.conf.js --specRetries 2

      - name: 📤 Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            *.log
            screenshots/
            *.apk

      - name: 🧹 Cleanup
        if: always()
        run: |
          adb emu