name: 🚀 Android E2E Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AVD_NAME: testAVD
      ANDROID_AVD_HOME: $HOME/.android/avd

    steps:
      - name: ↓ Checkout Code
        uses: actions/checkout@v3

      - name: ⚛️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: ☕️ Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 🔄 Install Android Command Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm cmdline-tools.zip

      - name: 🚀 Accept Android SDK Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: 🚀 Install Android SDK Packages
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "emulator" \
            "system-images;android-34;google_apis;x86_64"

      - name: ➕ Add adb to PATH
        run: echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: 🛠️ Create AVD
        run: |
          # Create AVD with default device
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --name "$AVD_NAME" \
            --package "system-images;android-34;google_apis;x86_64" \
            --device "pixel" \
            --force

          # Verify AVD directory creation
          if [ ! -d "$ANDROID_AVD_HOME/$AVD_NAME.avd" ]; then
            echo "::error::AVD directory not created at $ANDROID_AVD_HOME/$AVD_NAME.avd"
            exit 1
          fi

      - name: ⚖️ Configure Emulator Settings
        run: |
          echo "hw.ramSize=4096" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "hw.gpu.enabled=yes" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "hw.gpu.mode=swiftshader_indirect" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "disk.dataPartition.size=4G" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "hw.cpu.ncore=2" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"

      - name: ⚠️ Fix KVM permissions
        run: |
          sudo apt-get update -y
          sudo apt-get install -y qemu-kvm
          sudo chmod 666 /dev/kvm

      - name: 🌟 Start Emulator
        timeout-minutes: 10
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd "$AVD_NAME" \
            -no-audio -no-window -gpu swiftshader_indirect \
            -no-snapshot -wipe-data -memory 4096 -logcat '*:V' &
          sleep 300  # Extended boot time for API 34

      - name: ⌛ Wait for Emulator Boot
        timeout-minutes: 8
        run: |
          adb wait-for-device
          while [[ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ]]; do
            echo "Waiting for emulator to boot..."
            sleep 10
          done
          
          # Wake device and disable animations
          adb shell input keyevent 82
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

      - name: 🔢 List ADB Devices
        run: adb devices

      - name: 💾 Install Node Dependencies
        run: npm install

      - name: 🔽 Download APKs
        run: |
          pip install gdown
          gdown --fuzzy "https://drive.google.com/file/d/1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F/view?usp=drive_link" -O app-release-trainer.apk
          gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O appclient.apk

      - name: 🌐 Install APKs
        timeout-minutes: 5
        run: |
          adb uninstall com.willma.staging || true
          adb uninstall com.willma.client.staging || true
          
          adb install -t -r -g app-release-trainer.apk
          adb install -t -r -g appclient.apk
          sleep 15

      - name: 🚀 Run Appium Server
        run: |
          nohup npx appium --relaxed-security > appium.log 2>&1 &
          sleep 15

      - name: 🔧 Run E2E Tests
        timeout-minutes: 20
        run: npx wdio run ./wdio.ci.conf.js --specRetries 2

      - name: 🔍 Collect Logs and Screenshots
        if: always()
        run: |
          mkdir -p diagnostics
          adb logcat -d > diagnostics/logcat.log
          cp -r screenshots diagnostics/ || true
          cp appium.log diagnostics/appium.log || true

      - name: 📂 Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: diagnostics/

      - name: 🚪 Shutdown Emulator
        if: always()
        run: |
          adb emu kill || true
          pkill -f emulator || true