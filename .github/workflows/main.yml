name: Android E2E Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      apk_CI_PATH: ${{ github.workspace }}/apps/app-release-trainer.apk
      ANDROID_HOME: /usr/local/lib/android/sdk

    steps:
      # 1. Checkout & runtimes
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Set up Java 17 (Zulu)
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 2. Cache optimization
      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: |
            ~/.android/build-cache
            ${{ env.ANDROID_HOME }}/cmdline-tools
          key: android-cache-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}
          restore-keys: android-cache-${{ runner.os }}-

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node-modules-${{ runner.os }}-

      # 3. Dependency installation
      - name: Install NPM dependencies
        run: npm ci --prefer-offline

      # 4. Android emulator setup with robust boot verification
      - name: Run Android emulator
        uses: reactivecircus/android-emulator-runner@v2.34.0
        with:
          api-level: 28
          target: google_apis
          arch: x86
          profile: pixel_4
          force-avd-creation: true
          emulator-options: |
            -no-window 
            -no-audio 
            -gpu swiftshader_indirect 
            -no-snapshot-save
            -no-boot-anim
            -no-accel
          script: |
            #!/usr/bin/env bash
            set -exo pipefail

            echo "üîç Waiting for device..."
            adb wait-for-device

            echo "‚è≥ Checking boot completion..."
            for attempt in {1..30}; do
              boot_progress=$(adb shell getprop sys.boot_completed | tr -d '\r')
              boot_anim=$(adb shell getprop init.svc.bootanim | tr -d '\r')
              
              echo "[Attempt $attempt] Boot progress: $boot_progress, Animation: $boot_anim"
              
              if [[ "$boot_progress" == "1" && "$boot_anim" == "stopped" ]]; then
                echo "‚úÖ Emulator fully operational"
                
                # Additional stability checks
                echo "üîÑ Checking package manager..."
                adb shell pm list packages > /dev/null
                
                echo "üì± Device info:"
                adb shell getprop | grep -E 'ro.build.version|ro.product.model'
                
                exit 0
              fi
              
              sleep 5
            done

            echo "‚ùå Emulator failed to boot within 150 seconds"
            adb emu kill
            exit 1

      # 5. APK verification and installation
      - name: Verify build artifacts
        run: |
          if [ ! -f "${{ env.apk_CI_PATH }}" ]; then
            echo "::error::Missing APK at ${{ env.apk_CI_PATH }}"
            exit 1
          fi
          echo "APK size: $(du -h "${{ env.apk_CI_PATH }}" | cut -f1)"

      - name: Install APK
        run: |
          max_retries=3
          for ((i=1; i<=$max_retries; i++)); do
            if adb install -r -t -g "${{ env.apk_CI_PATH }}"; then
              echo "‚úÖ APK installed successfully on attempt $i"
              break
            fi
            echo "‚ö†Ô∏è Install attempt $i failed, retrying..."
            sleep $((i * 2))
          done

          # Verify installation
          if ! adb shell pm list packages | grep -q "com.willma.staging"; then
            echo "::error::APK not found in installed packages"
            exit 1
          fi

      # 6. Test execution
      - name: Start Appium Server
        run: |
          nohup npx appium --log-timestamp --local-timezone > logs/appium.log 2>&1 &
          sleep 10
          echo "‚ÑπÔ∏è Appium server PID: $(pgrep -f 'appium')"

      - name: Run WDIO Tests
        timeout-minutes: 15
        run: |
          set -x
          npx wdio run ./wdio.ci.conf.js --specRetries 2

      # 7. Artifact collection
      - name: Capture test artifacts
        if: always()
        run: |
          mkdir -p artifacts
          adb logcat -d > artifacts/logcat.log
          adb bugreport artifacts/bugreport.zip
          cp -r screenshots/ artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-artifacts-${{ github.run_id }}
          path: |
            allure-results/
            artifacts/
            logs/
          retention-days: 3

      # 8. Post-execution cleanup
      - name: Stop emulator
        if: always()
        run: |
          adb emu kill || true
          pkill -f 'emulator' || true