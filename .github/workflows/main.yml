name: 🚀 Android E2E Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AVD_NAME: testAVD
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_AVD_HOME: ${{ github.workspace }}/.android/avd

    steps:
      - name: ↓ Checkout Code
        uses: actions/checkout@v3

      - name: ⚛️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: ☕️ Install Java 11 (SDK Manager Requirement)
        uses: actions/setup-java@v3
        id: java-11
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: 🔄 Install Android Command Line Tools (v8.0)
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d "$ANDROID_HOME/cmdline-tools"
          mv "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"
          rm cmdline-tools.zip

          # Verify directory structure
          ls -la $ANDROID_HOME/cmdline-tools/latest/lib

      - name: 📝 Configure Java 11 Environment
        run: |
          echo "JAVA_HOME=${JAVA_HOME_11}" >> $GITHUB_ENV
          echo "PATH=${JAVA_HOME_11}/bin:$PATH" >> $GITHUB_ENV

      - name: 🚀 Accept Licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: 🚀 Install Android SDK Components
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;34.0.0" \
            "emulator" \
            "system-images;android-33;google_apis;x86_64"

          # Verify platform installation
          ls -la $ANDROID_HOME/platforms/android-33

      - name: ➕ Add Android Tools to PATH
        run: |
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH

      - name: ☕️ Switch to Java 17 (For Test Execution)
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 🛠️ Create AVD
        run: |
          avdmanager create avd \
            --name "$AVD_NAME" \
            --package "system-images;android-33;google_apis;x86_64" \
            --device "pixel_4" \
            --force

          # Verify AVD creation
          ls -la $ANDROID_AVD_HOME

      - name: ⚙️ Configure Emulator Hardware
        run: |
          echo "hw.ramSize=2048" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "hw.gpu.enabled=yes" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"
          echo "vm.heapSize=256" >> "$ANDROID_AVD_HOME/$AVD_NAME.avd/config.ini"

      - name: 🔧 Setup KVM
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm
          sudo chmod 666 /dev/kvm

      - name: 🚀 Start Emulator
        timeout-minutes: 10
        run: |
          emulator -avd $AVD_NAME \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -wipe-data \
            -memory 2048 \
            -logcat '*:V' > emulator.log 2>&1 &
          sleep 300  # Extended boot time for CI

      - name: ⏳ Wait for Boot Completion
        timeout-minutes: 5
        run: |
          adb wait-for-device
          until adb shell getprop sys.boot_completed | grep -q 1; do
            echo "Waiting for boot..."
            sleep 10
          done
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

      - name: 📦 Install APKs
        run: |
          adb install -t -g app-release.apk
          adb install -t -g app-client.apk

      - name: 🚀 Start Appium Server
        run: |
          npx appium --relaxed-security &> appium.log &
          sleep 15

      - name: 🧪 Run E2E Tests
        timeout-minutes: 20
        run: npx wdio run ./wdio.conf.js

      - name: 📤 Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            *.log
            screenshots/
            artifacts/

      - name: 🧹 Cleanup
        if: always()
        run: |
          adb emu kill || true
          pkill -f appium || true
          pkill -f emulator || true