name: E2E Android Test

on:
  push:
    branches: [main]

jobs:
  android-e2e-tests:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3

      - name: 🧰 Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: 🧰 Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: 🧱 Install Android components
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "emulator" "platforms;android-29"

          # Try fast emulation with KVM using x86 image
          if ! sdkmanager --install "system-images;android-29;google_apis;x86"; then
            echo "❌ Failed to install x86 image or KVM not available. Falling back to ARM64..."
            sdkmanager --install "system-images;android-29;google_apis;arm64-v8a"
          fi

      - name: 📱 Create Android Emulator
        run: |
          # Determine available image
          IMAGE="system-images;android-29;google_apis;x86"
          if ! sdkmanager --list | grep -q "$IMAGE"; then
            IMAGE="system-images;android-29;google_apis;arm64-v8a"
          fi
          echo "Using emulator image: $IMAGE"
          echo "no" | avdmanager create avd --force --name test --package "$IMAGE" --device "pixel"

      - name: 🏗️ Configure Emulator
        run: |
          CONFIG_FILE="$ANDROID_AVD_HOME/test.avd/config.ini"
          echo "hw.gpu.enabled=no" >> "$CONFIG_FILE"
          echo "hw.gpu.mode=off" >> "$CONFIG_FILE"
          echo "hw.keyboard=yes" >> "$CONFIG_FILE"
          echo "hw.mainKeys=no" >> "$CONFIG_FILE"
          echo "hw.lcd.density=980" >> "$CONFIG_FILE"
          echo "hw.ramSize=4000" >> "$CONFIG_FILE"
          echo "disk.dataPartition.size=2G" >> "$CONFIG_FILE"
          echo "sdcard.size=512M" >> "$CONFIG_FILE"
          echo "hw.device.name=pixel" >> "$CONFIG_FILE"
          echo "hw.accelerometer=yes" >> "$CONFIG_FILE"
          echo "hw.camera.back=none" >> "$CONFIG_FILE"
          echo "hw.camera.front=none" >> "$CONFIG_FILE"

      - name: 🚀 Start Emulator & Wait for Boot
        run: |
          nohup $ANDROID_SDK_ROOT/emulator/emulator -avd test -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none &

          echo "Waiting for emulator to start..."
          adb wait-for-device
          boot_completed=""
          until [[ "$boot_completed" == "1" ]]; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>&1 | tr -d '\r')
            echo "Boot completed status: $boot_completed"
            sleep 5
          done
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          echo "✅ Emulator ready"

      - name: 🐍 Download APKs via Python
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip gdown
          gdown --fuzzy "https://drive.google.com/file/d/1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F/view?usp=drive_link" -O app-release-trainer.apk
          gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O appclient.apk

      - name: 📦 Uninstall Old + Install New APKs
        run: |
          echo "📦 Installing APKs"
          adb shell pm list packages | grep com.willma.staging && adb uninstall com.willma.staging || echo "Trainer not installed"
          adb shell pm list packages | grep com.willma.client.staging && adb uninstall com.willma.client.staging || echo "Client not installed"
          adb install -r -g app-release-trainer.apk
          adb install -r -g appclient.apk

      - name: 🧪 Install Node & Dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📦 Install npm dependencies
        run: npm ci

      - name: 🚀 Start Appium Server
        run: |
          mkdir -p logs
          nohup npx appium --relaxed-security --log-timestamp > logs/appium.log 2>&1 &
          sleep 10

      - name: 🧪 Run E2E Tests
        run: |
          echo "🧪 Running WebdriverIO tests"
          npx wdio run ./wdio.ci.conf.js || true

      - name: 📸 Upload Screenshots (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ./errorShots/

      - name: 📄 Upload Appium Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium-logs
          path: logs/appium.log

      - name: 🧹 Shutdown Emulator
        if: always()
        run: adb -s emulator-5554 emu kill || true
