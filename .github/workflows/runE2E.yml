name: Android E2E Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AVD_NAME: testAVD
      ANDROID_AVD_HOME: $HOME/.android/avd

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üß± Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: üì¶ Install Dependencies
        run: npm install

      - name: ‚òï Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: üì¶ Install Android SDK & Required Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip wget
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O tools.zip
          unzip tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "emulator" \
            "platforms;android-34" \
            "system-images;android-34;google_apis;x86_64" \
            "build-tools;34.0.0"
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: üîß KVM Setup
        run: |
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo gpasswd -a $USER kvm
          sudo chmod 666 /dev/kvm

      - name: üì± Create and Configure AVD
        run: |
          mkdir -p "$ANDROID_AVD_HOME"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --name "$AVD_NAME" \
            --package "system-images;android-34;google_apis;x86_64" \
            --device "pixel" --force
          CONFIG_FILE="$ANDROID_AVD_HOME/${AVD_NAME}.avd/config.ini"
          for i in {1..30}; do
            [ -f "$CONFIG_FILE" ] && break
            sleep 2
          done
          if [ -f "$CONFIG_FILE" ]; then
            echo "hw.ramSize=4096" >> "$CONFIG_FILE"
            echo "hw.gpu.enabled=yes" >> "$CONFIG_FILE"
            echo "hw.gpu.mode=swiftshader_indirect" >> "$CONFIG_FILE"
          else
            echo "::error::AVD config.ini not found at $CONFIG_FILE"
            ls -l "$ANDROID_AVD_HOME"
            exit 1
          fi

      - name: üöÄ Start Emulator
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd "$AVD_NAME" -no-audio -no-window -gpu swiftshader_indirect -no-boot-anim -no-snapshot-load &

      - name: ‚è≥ Wait for Emulator to Boot
        run: |
          adb wait-for-device
          boot_completed=""
          timeout=480
          count=0
          until [[ "$boot_completed" == "1" || $count -ge $timeout ]]; do
            boot_completed=$(adb shell getprop sys.boot_completed | tr -d '\r')
            echo "Waiting for emulator to boot... ($count s) - boot_completed: $boot_completed"
            sleep 5
            count=$((count + 5))
          done
          if [ "$boot_completed" != "1" ]; then
            echo "::error::Emulator failed to boot"
            adb shell getprop
            exit 1
          fi

      - name: üîá Disable Animations
        run: |
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

      - name: ‚¨áÔ∏è Download APKs
        run: |
          pip install --user gdown
          ~/.local/bin/gdown --fuzzy "https://drive.google.com/file/d/1moB6CyW6wC5MJDlDlfkT_TZ0QIfsuNEz/view?usp=drive_link" -O app-release-trainer.apk
          ~/.local/bin/gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O appclient.apk

      - name: üîç Verify Downloaded APKs
        run: |
          echo "--- app-release-trainer.apk ---"
          ls -l app-release-trainer.apk
          $ANDROID_HOME/build-tools/34.0.0/aapt dump badging app-release-trainer.apk | grep -E "package:|launchable-activity"

          echo "--- appclient.apk ---"
          ls -l appclient.apk
          $ANDROID_HOME/build-tools/34.0.0/aapt dump badging appclient.apk | grep -E "package:|launchable-activity"

      - name: üìã Check Current Package State
        run: |
          echo "=== Current installed packages ==="
          adb shell pm list packages | grep willma || echo "No willma packages found"
          
          echo "=== Package details if they exist ==="
          for PACKAGE in com.willma.staging com.willma.client.staging; do
            echo "--- $PACKAGE ---"
            adb shell dumpsys package $PACKAGE | grep -E "versionName|signatures|firstInstallTime" || echo "Package $PACKAGE not found"
          done

      - name: üßπ Force Uninstall and Clean Install APKs
        run: |
          # Ultra-aggressive cleanup approach
          echo "=== PHASE 1: Comprehensive Package Removal ==="
          
          for PACKAGE in com.willma.staging com.willma.client.staging; do
            echo "=== Handling $PACKAGE ==="
            
            # Kill all processes first
            echo "Stopping all processes for $PACKAGE..."
            adb shell am force-stop $PACKAGE || true
            adb shell killall $PACKAGE 2>/dev/null || true
            
            # Try multiple uninstall methods
            echo "Attempting comprehensive uninstall..."
            adb shell pm clear $PACKAGE || true
            adb shell pm uninstall --user 0 $PACKAGE || true
            adb shell pm uninstall -k --user 0 $PACKAGE || true
            adb shell pm uninstall --user all $PACKAGE || true
            adb uninstall $PACKAGE || true
            
            # Check all user profiles
            echo "Checking all user profiles..."
            USER_IDS=$(adb shell pm list users | grep -o 'UserInfo{[0-9]*' | cut -d'{' -f2)
            for USER_ID in $USER_IDS; do
              echo "Uninstalling for user $USER_ID..."
              adb shell pm uninstall --user $USER_ID $PACKAGE 2>/dev/null || true
            done
            
            echo "Cleanup attempts completed for $PACKAGE"
          done

          # Wait and verify cleanup worked
          sleep 3
          echo "=== Verifying cleanup status ==="
          REMAINING_PACKAGES=$(adb shell pm list packages | grep willma || echo "")
          if [[ -n "$REMAINING_PACKAGES" ]]; then
            echo "‚ö†Ô∏è WARNING: Some packages still detected:"
            echo "$REMAINING_PACKAGES"
            
            # Last resort: try to force remove each remaining package
            echo "=== PHASE 2: Last Resort Cleanup ==="
            while IFS= read -r line; do
              if [[ $line == package:* ]]; then
                PKG_NAME=$(echo $line | cut -d':' -f2)
                echo "Force removing stubborn package: $PKG_NAME"
                adb shell pm disable-user --user 0 $PKG_NAME || true
                adb shell pm uninstall --user 0 $PKG_NAME || true
                adb shell pm hide --user 0 $PKG_NAME || true
              fi
            done <<< "$REMAINING_PACKAGES"
          else
            echo "‚úÖ All willma packages successfully removed"
          fi

          # Final verification before install
          sleep 2
          FINAL_CHECK=$(adb shell pm list packages | grep willma || echo "")
          if [[ -n "$FINAL_CHECK" ]]; then
            echo "::warning::Some packages still present after cleanup:"
            echo "$FINAL_CHECK"
            echo "Proceeding with installation anyway..."
          fi

          # Install APKs with all available flags
          echo "=== PHASE 3: Installing APKs ==="
          
          echo "Installing Trainer APK..."
          if adb install -r -d -g --force-sdk app-release-trainer.apk 2>&1; then
            echo "‚úÖ Trainer APK installed successfully"
          else
            echo "::error::‚ùå Trainer APK install failed"
            adb shell pm list packages | grep willma || echo "No willma packages found"
            exit 1
          fi

          echo "Installing Client APK..."
          # Try with maximum flags for problematic APK
          if adb install -r -d -g --force-sdk appclient.apk 2>&1; then
            echo "‚úÖ Client APK installed successfully"
          else
            echo "‚ùå Standard install failed, trying alternative approach..."
            # Alternative: disable package verification
            adb shell settings put global verifier_verify_adb_installs 0 || true
            adb shell settings put global package_verifier_enable 0 || true
            sleep 2
            
            if adb install -r -d -g --force-sdk --bypass-low-target-sdk-block appclient.apk 2>&1; then
              echo "‚úÖ Client APK installed successfully (alternative method)"
            else
              echo "::error::‚ùå Client APK install failed completely"
              echo "Dumping detailed error info..."
              adb shell pm list packages | grep willma
              adb logcat -d | grep -i "install\|package" | tail -20
              exit 1
            fi
          fi

      - name: ‚úÖ Verify Both APKs Are Installed
        run: |
          echo "=== Final Installation Verification ==="
          
          # Check if both packages are listed
          INSTALLED_PACKAGES=$(adb shell pm list packages | grep willma)
          echo "Installed willma packages:"
          echo "$INSTALLED_PACKAGES"
          
          # Verify specific packages
          TRAINER_INSTALLED=$(adb shell pm list packages | grep com.willma.staging || echo "")
          CLIENT_INSTALLED=$(adb shell pm list packages | grep com.willma.client.staging || echo "")
          
          if [[ -z "$TRAINER_INSTALLED" ]]; then
            echo "::error::‚ùå Trainer package (com.willma.staging) not found!"
            exit 1
          else
            echo "‚úÖ Trainer package confirmed: $TRAINER_INSTALLED"
          fi
          
          if [[ -z "$CLIENT_INSTALLED" ]]; then
            echo "::error::‚ùå Client package (com.willma.client.staging) not found!"
            exit 1
          else
            echo "‚úÖ Client package confirmed: $CLIENT_INSTALLED"
          fi
          
          # Get detailed info about both packages
          echo "=== Package Details ==="
          for PACKAGE in com.willma.staging com.willma.client.staging; do
            echo "--- $PACKAGE ---"
            adb shell dumpsys package $PACKAGE | grep -E "versionName|versionCode|firstInstallTime"
          done
          
          # Test that we can launch both apps (optional)
          echo "=== Testing App Launch Capability ==="
          adb shell monkey -p com.willma.staging -c android.intent.category.LAUNCHER 1 || echo "Warning: Could not launch trainer app"
          sleep 2
          adb shell monkey -p com.willma.client.staging -c android.intent.category.LAUNCHER 1 || echo "Warning: Could not launch client app"
          
          echo "üéâ Both APKs are successfully installed and verified!"

      - name: üß™ Start Appium Server
        run: |
          mkdir -p logs
          nohup npx appium --relaxed-security --log-timestamp > logs/appium.log 2>&1 &
          sleep 10

      - name: üß™ Run E2E Tests
        run: |
          npx wdio run ./wdio.ci.conf.js
        continue-on-error: true

      - name: üì∑ Collect Diagnostics
        if: always()
        run: |
          mkdir -p diagnostics
          adb logcat -d > diagnostics/logcat.log
          adb shell cat /data/anr/traces.txt > diagnostics/anr-traces.log || true
          cp -r screenshots diagnostics/ || true
          cp -r logs/ diagnostics/ || true
          
          # Add package state to diagnostics
          echo "=== Final Package State ===" > diagnostics/final-package-state.log
          adb shell pm list packages | grep willma >> diagnostics/final-package-state.log || echo "No willma packages" >> diagnostics/final-package-state.log

      - name: üì§ Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ github.run_id }}
          path: diagnostics/
          retention-days: 7

      - name: üõë Kill Emulator
        if: always()
        run: |
          adb emu kill || true
          pkill -f 'qemu-system' || true
          pkill -f 'emulator' || true