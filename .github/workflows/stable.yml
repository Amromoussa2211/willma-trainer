# name: üöÄ Android E2E Tests

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   e2e-tests:
#     runs-on: ubuntu-latest
#     env:
#       AVD_NAME: testAVD
#       ANDROID_AVD_HOME: $HOME/.android/avd

#     steps:
#       - name: ‚Üì Checkout Code
#         uses: actions/checkout@v3

#       - name: ‚öõÔ∏è Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: ‚òïÔ∏è Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'zulu'
#           java-version: '17'

#       - name: ‚ôªÔ∏è Clear SDK Cache
#         run: |
#           rm -rf $ANDROID_HOME/licenses $ANDROID_HOME/tools $ANDROID_HOME/cmdline-tools

#       - name: üîÑ Install Android Command Line Tools
#         run: |
#           mkdir -p $ANDROID_HOME/cmdline-tools
#           wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
#           unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
#           mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
#           rm cmdline-tools.zip

#       - name: üöÄ Accept Android SDK Licenses
#         run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

#       - name: üöÄ Install Android SDK Packages
#         run: |
#           $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
#             "platform-tools" \
#             "platforms;android-34" \
#             "build-tools;34.0.0" \
#             "emulator" \
#             "system-images;android-34;google_apis;x86_64"

#       - name: ‚ûï Add adb to PATH
#         run: echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

#       - name: üõ†Ô∏è Create AVD
#         run: |
#           echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
#             --name "$AVD_NAME" \
#             --package "system-images;android-34;google_apis;x86_64" \
#             --device "pixel" \
#             --force

#       - name: ‚öñÔ∏è Configure Emulator Settings
#         run: |
#           echo "hw.cpu.ncore=2" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini
#           echo "hw.ramSize=2048" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini
#           echo "hw.gpu.enabled=yes" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini
#           echo "hw.gpu.mode=swiftshader_indirect" >> ~/.android/avd/${{ env.AVD_NAME }}.avd/config.ini

#       - name: ‚ö†Ô∏è Fix KVM permissions
#         run: |
#           sudo apt-get update -y
#           sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
#           sudo gpasswd -a $USER kvm
#           sudo chmod 666 /dev/kvm

#       - name: ‚úÖ Verify KVM
#         run: |
#           if [ ! -e /dev/kvm ]; then
#             echo "KVM is not available." && exit 1
#           fi

#       - name: üåü Start Emulator
#         run: |
#           nohup $ANDROID_HOME/emulator/emulator -avd "$AVD_NAME" -no-audio -no-window -gpu swiftshader_indirect &
#           sleep 120

#       - name: ‚åõ Wait for Emulator Boot
#         run: |
#           adb wait-for-device
#           while [[ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ]]; do
#             echo "Waiting for emulator to boot..."
#             sleep 5
#           done

#       - name: ‚úÖ Disable Bluetooth
#         run: adb shell settings put global bluetooth_on 0

#       - name: üî¢ List ADB Devices
#         run: adb devices

#       - name: üíæ Install Node Dependencies
#         run: npm install

#       - name: üîΩ Download APKs
#         run: |
#           pip install gdown
#           gdown --fuzzy "https://drive.google.com/file/d/1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F/view?usp=drive_link" -O app-release-trainer.apk
#           gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O appclient.apk

#       - name: üåê Install APKs
#         run: |
#           adb uninstall com.willma.staging || true
#           adb uninstall com.willma.client.staging || true

#           adb install -r -g app-release-trainer.apk
#           adb install -r -g appclient.apk
#           sleep 10

#       - name: üîé Verify APK Activities
#         continue-on-error: true
#         run: |
#           adb shell pm list packages | grep willma || echo "::warning::No Willma packages found"

#           echo "\nListing activities for com.willma.staging"
#           adb shell dumpsys package com.willma.staging | grep -i 'com.willma.staging.MainActivity' || echo "::warning::MainActivity for staging not found"

#           echo "\nListing activities for com.willma.client.staging"
#           adb shell dumpsys package com.willma.client.staging | grep -i 'com.willma.client.staging.MainActivity' || echo "::warning::MainActivity for client not found"

#           echo "\nCurrent foreground activity:"
#           adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp' || echo "::warning::Unable to detect foreground activity"

#       - name: üöÄ Run Appium Server
#         run: |
#           nohup npx appium --relaxed-security > appium.log 2>&1 &
#           sleep 10

#       - name: üîß Run E2E Tests
#         run: npx wdio run ./wdio.ci.conf.js --specRetries 2

#       - name: üîç Collect Logs and Screenshots
#         if: always()
#         run: |
#           mkdir -p diagnostics
#           adb logcat -d > diagnostics/logcat.log
#           cp -r screenshots diagnostics/ || true
#           cp appium.log diagnostics/appium.log || true

#       - name: üìÇ Upload Artifacts
#         uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: test-results-${{ github.run_id }}
#           path: diagnostics/

#       - name: üö™ Shutdown Emulator
#         if: always()
#         run: |
#           adb emu kill || true
#           pkill -f emulator || true




# name: Android E2E Tests

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   e2e-tests:
#     runs-on: ubuntu-latest
#     env:
#       AVD_NAME: testAVD
#       ANDROID_AVD_HOME: $HOME/.android/avd

#     steps:
#       - name: üì• Checkout Code
#         uses: actions/checkout@v3

#       - name: üß± Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: ‚òï Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'zulu'
#           java-version: '17'

#       - name: üì¶ Download and Install Android SDK
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y unzip wget
#           mkdir -p $ANDROID_HOME/cmdline-tools
#           wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O tools.zip
#           unzip tools.zip -d $ANDROID_HOME/cmdline-tools
#           mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
#           yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
#           $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
#             "platform-tools" \
#             "emulator" \
#             "platforms;android-34" \
#             "system-images;android-34;google_apis;x86_64" \
#             "build-tools;34.0.0"
#           # Ensure emulator binary is available in PATH
#           echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH

#       - name: ‚ûï Add adb to PATH
#         run: |
#           echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

#       - name: üì± Create and Configure AVD
#         run: |
#           echo "Creating AVD..."
#           # Pre-create the AVD home directory to avoid race conditions
#           mkdir -p "$ANDROID_AVD_HOME"
#           echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
#             --name "$AVD_NAME" \
#             --package "system-images;android-34;google_apis;x86_64" \
#             --device "pixel" \
#             --force

#           echo "Waiting for config.ini to be created..."
#           CONFIG_FILE="$ANDROID_AVD_HOME/${AVD_NAME}.avd/config.ini"
#           for i in {1..30}; do
#             if [ -f "$CONFIG_FILE" ]; then
#               break
#             fi
#             sleep 2
#           done

#           echo "üõ†Ô∏è Configuring AVD hardware..."
#           if [ -f "$CONFIG_FILE" ]; then
#             echo "hw.ramSize=2048" >> "$CONFIG_FILE"
#             echo "hw.gpu.enabled=yes" >> "$CONFIG_FILE"
#             echo "hw.gpu.mode=swiftshader_indirect" >> "$CONFIG_FILE"
#           else
#             echo "::error::AVD config.ini not found at $CONFIG_FILE"
#             ls -l "$ANDROID_AVD_HOME"
#             exit 1
#           fi

#       - name: üîß KVM Permissions
#         run: |
#           sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
#           sudo gpasswd -a $USER kvm
#           sudo chmod 666 /dev/kvm

#       - name: üöÄ Start Emulator
#         run: |
#           nohup $ANDROID_HOME/emulator/emulator -avd "$AVD_NAME" -no-audio -no-window -gpu swiftshader_indirect -no-boot-anim &

#       - name: ‚è≥ Wait for Emulator Boot
#         run: |
#           adb wait-for-device
#           boot_completed=""
#           until [ "$boot_completed" = "1" ]; do
#             boot_completed=$(adb shell getprop sys.boot_completed | tr -d '\r')
#             sleep 5
#           done

#       - name: üîá Disable Animations
#         run: |
#           adb shell settings put global window_animation_scale 0
#           adb shell settings put global transition_animation_scale 0
#           adb shell settings put global animator_duration_scale 0

#       - name: üì¶ Install Dependencies
#         run: npm ci

#       - name: ‚¨áÔ∏è Download APKs
#         run: |
#           pip install gdown
#           gdown --fuzzy "https://drive.google.com/file/d/1UmKiTZ6SlMorOBLx754Fs7_oqoNxFQ4F/view?usp=drive_link" -O app-release-trainer.apk
#           gdown --fuzzy "https://drive.google.com/file/d/1cJH7DtaorZNJt6oUGiuWrnBxEh6VjJmY/view?usp=drive_link" -O appclient.apk

#       - name: ‚úÖ Install APKs
#         run: |
#           adb uninstall com.willma.staging || true
#           adb uninstall com.willma.client.staging || true
#           adb install -r -g app-release-trainer.apk
#           adb install -r -g appclient.apk

#       - name: üîç Verify APK State
#         continue-on-error: true
#         run: |
#           adb shell pm list packages | grep willma || echo "::warning::No Willma packages found"
#           adb shell dumpsys package com.willma.staging | grep -i 'MainActivity' || echo "::warning::MainActivity not found"
#           adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp' || echo "::warning::No foreground activity"

#       - name: üß™ Start Appium Server
#         run: |
#           mkdir -p logs
#           nohup npx appium --relaxed-security --log-timestamp > logs/appium.log 2>&1 &
#           sleep 10

#       - name: üß™ Run E2E Tests
#         run: |
#           npx wdio run ./wdio.ci.conf.js
#         continue-on-error: true

#       - name: üì∑ Collect Diagnostics
#         if: always()
#         run: |
#           mkdir -p diagnostics
#           adb logcat -d > diagnostics/logcat.log
#           adb shell cat /data/anr/traces.txt > diagnostics/anr-traces.log || true
#           cp -r screenshots diagnostics/ || true
#           cp -r logs/ diagnostics/ || true

#       - name: üì§ Upload Artifacts
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: e2e-results-${{ github.run_id }}
#           path: diagnostics/
#           retention-days: 7

#       - name: üõë Kill Emulator
#         if: always()
#         run: |
#           adb emu kill || true
#           pkill -f 'qemu-system' || true
